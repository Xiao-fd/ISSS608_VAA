[
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "title": "In-class_Ex06",
    "section": "",
    "text": "Loading package\n\nlibrary(stringi)\nlibrary(stringr)\nlibrary(tidyr)\nlibrary(tibble)\nlibrary(rvest)\nlibrary(corporaexplorer)\nlibrary(readr)\n\n\nAttaching package: 'readr'\n\n\nThe following object is masked from 'package:rvest':\n\n    guess_encoding\n\n\n\npacman:: p_load(tidyverse,readtext,\n                corporaexplorer\n                )\n\nread data\n\nbible &lt;- readr::read_lines(\"http://www.gutenberg.org/cache/epub/10/pg10.txt\")\n\n\n# Collapsing into one string.\nbible &lt;- paste(bible, collapse = \"\\n\")\n\n\nstart_v &lt;- stri_locate_first_fixed(bible, \"The First Book of Moses: Called Genesis\")[1]\nend_v &lt;- stri_locate_last_fixed(bible, \"Amen.\")[2]\nbible &lt;- stri_sub(bible, start_v, end_v)\n\n\nbooks &lt;- stri_split_regex(bible, \"\\n{5}\") %&gt;%\n    unlist %&gt;%\n    .[-40] \n\n\nbooks &lt;- str_replace_all(books, \"\\n{2,}\", \"NEW_PARAGRAPH\") %&gt;%\n    str_replace_all(\"\\n\", \" \") %&gt;%\n    str_replace_all(\"NEW_PARAGRAPH\", \"\\n\\n\")\nbooks &lt;- books[3:68] \n\n\nchapters &lt;- str_replace_all(books, \"(\\\\d+:1 )\", \"NEW_CHAPTER\\\\1\") %&gt;%\n    stri_split_regex(\"NEW_CHAPTER\")\n\n\nchapters &lt;- lapply(chapters, function(x) x[-1])\n\n\nbook_titles &lt;- read_html(\"https://www.esv.org/resources/esv-global-study-bible/list-of-abbreviations\") %&gt;%\n  html_nodes(\"td:nth-child(1)\") %&gt;%\n  html_text() %&gt;%\n  .[13:78]\n\n\ntestament &lt;- c(rep(\"Old\", 39), rep(\"New\", 27))\n\n\nbible_df &lt;- tibble::tibble(Text = chapters,\n                           Book = book_titles,\n                           Testament = testament)\n\n\n# We want each chapter to be one row, but keep the metadata (book and which testament).\nbible_df &lt;- tidyr::unnest(bible_df, Text)\n\n\n# As this is a corpus which is not organised by date,\n  # we set `date_based_corpus` to `FALSE`.\n# Because we want to organise our exploration around the books in the Bible,\n  # we pass `\"Book\"` to the `grouping_variable` argument.\n# We specify which metadata columns we want to be displayed in the\n  # \"Document information\" tab, using the `columns_doc_info` argument.\nKJB &lt;- prepare_data(dataset = bible_df,\n                    date_based_corpus = FALSE,\n                    grouping_variable = \"Book\",\n                    columns_doc_info = c(\"Testament\", \"Book\"))\n\nStarting.\n\n\nDocument data frame done.\n\n\nCorpus is not date based. Calendar data frame skipped.\n\n\nDocument term matrix: text processed.\n\n\nDocument term matrix: tokenising completed.\n\n\nDocument term matrix: word list created.\n\n\nDocument term matrix done.\n\n\nDone.\n\n\n\nclass(KJB)\n\n[1] \"corporaexplorerobject\"\n\n\n\nexplore(KJB)\n\nExploring 1,175 documents\n\n\nLoading required package: shiny\n\n\nShiny applications not supported in static R Markdown documents\n\n\n(this function allow to search the words in the articles )\nIn-class exercise\n\npacman::p_load(jsonlite, tidygraph,ggraph, \n               visNetwork, graphlayouts,\n               tidyverse,tidytext,\n               skimr)\n\nData import\n\nmc3_data &lt;- fromJSON(\"data/MC3.json\")\n\n\nclass(mc3_data)\n\n[1] \"list\"\n\n\nabstract into two dataframe to rebuild the data\nreconstruct the model\nextracting the edges\n\nmc3_edges &lt;- as_tibble(mc3_data$links) %&gt;%\n  distinct() %&gt;%\n  mutate(source =\nas.character(source),\n          target = \nas.character(target),\n           type = as.character(type)) %&gt;%\n  group_by(source, target, type) %&gt;%\n  summarise(weight = n()) %&gt;%\n  filter(source!= target) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'source', 'target'. You can override using\nthe `.groups` argument.\n\n\n\nmc3_nodes &lt;- as_tibble(mc3_data$nodes) %&gt;%\n  mutate(country = as.character(country),\n         id = as.character(id),\n         product_services =\nas.character(product_services), \n         revenue_omu = \nas.numeric(as.character(revenue_omu)),\n        type = as.character(type)) %&gt;%\n        select(id,country,type, revenue_omu,\n         product_services)\n\nWarning: There was 1 warning in `mutate()`.\nâ„¹ In argument: `revenue_omu = as.numeric(as.character(revenue_omu))`.\nCaused by warning:\n! NAs introduced by coercion\n\n\n\nid1&lt;- mc3_edges %&gt;%\n  select(source) %&gt;%\n  rename(id =source)\nid2 &lt;- mc3_edges %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\nmc3_node1 &lt;- rbind(id1,id2) %&gt;%\n  distinct() %&gt;%\n  left_join(mc3_nodes,\n            unmatched =\"drop\")\n\nJoining with `by = join_by(id)`\n\n\n\nmc3_graph &lt;- tbl_graph(nodes = mc3_node1,\n                       edges = mc3_edges,\n                       directed = FALSE) %&gt;%\nmutate(betweenness_centrality = \ncentrality_betweenness(),\n       closeness_centrality =\n   centrality_closeness())\n\n\nmc3_graph %&gt;%\n  filter(betweenness_centrality &gt;= 100000) %&gt;%\nggraph(layout = \"fr\") +\n  geom_edge_link(aes(alpha=0.5)) +\n  geom_node_point(aes(\n    size = betweenness_centrality,\n    colors =\"'lightblue\",\n    alpha = 0.5)) +\n  scale_size_continuous(range =c(1,10)) + \n  theme_graph()\n\nWarning in geom_node_point(aes(size = betweenness_centrality, colors =\n\"'lightblue\", : Ignoring unknown aesthetics: colours"
  }
]