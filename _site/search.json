[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608_VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "There are two major residential property market in Singapore, namely public and private housing. Public housing aims to meet the basic need of the general public with monthly household income less than or equal to S$14,000. For families with monthly household income more than S$14,000, they need to turn to the private residential market.\n\n\n\nIn this exercise, Exploratory Data Analysis (EDA) methods and ggplot functions are used to explore:\n\nthe distribution of prices across different regions and residences types .\nthe relationship between the price and types of residences and sub-market.\n\n\n\n\nA complete set of the private residential property transaction data from 1st January 2023 to 31st March 2024 are provided."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "There are two major residential property market in Singapore, namely public and private housing. Public housing aims to meet the basic need of the general public with monthly household income less than or equal to S$14,000. For families with monthly household income more than S$14,000, they need to turn to the private residential market."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#our-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#our-task",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "In this exercise, Exploratory Data Analysis (EDA) methods and ggplot functions are used to explore:\n\nthe distribution of prices across different regions and residences types .\nthe relationship between the price and types of residences and sub-market."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "A complete set of the private residential property transaction data from 1st January 2023 to 31st March 2024 are provided."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-r-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-r-packages",
    "title": "Take-home Exercise 1",
    "section": "1.1 Loading R packages",
    "text": "1.1 Loading R packages\nWe load the following R packages using the pacman::p_load() function:\n\npacman::p_load(tidyverse, ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n              ggridges, colorspace) \n\n\ntidyverse: Core collection of R packages designed for data science\nggrepel: to provide geoms for ggplot2 to repel overlapping text labels\nggthemes: to use additional themes for ggplot2\npatchwork: to prepare composite figure created using ggplot2\nhrbrthemes: to provide typography-centric themes and theme components for ggplot2\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots\ncolorspace, to provide a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-data",
    "title": "Take-home Exercise 1",
    "section": "1.2 Importing data",
    "text": "1.2 Importing data\nThe code chunk below imports the dataset into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\nRead the individual CSV files into data frames. Check that the structure of each data frame is the same.\n\nRT_q1_2023 &lt;- read_csv(\"data/ResidentialTransaction2023Q1.csv\")\n\n\nRT_q2_2023 &lt;- read_csv(\"data/ResidentialTransaction2023Q2.csv\")\n\n\nRT_q3_2023 &lt;- read_csv(\"data/ResidentialTransaction2023Q3.csv\")\n\n\nRT_q4_2023 &lt;- read_csv(\"data/ResidentialTransaction2023Q4.csv\")\n\n\nRT_q1_2024 &lt;- read_csv(\"data/ResidentialTransaction2024Q1.csv\")\n\nThis is to conduct a preliminary exploration to understand the basic characteristics of the dataset. Notably, the ‘Sale Date’ column, which should ideally be a date type , it is read as a character (chr) type.\n\n\n\n\n\n\nWarning\n\n\n\n\nIt’s alerting that not all data may have been read into the R data frame correctly due to issues in the CSV file format or its contents. The data sets type have to be converted first before combine them into one."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#convert-data-type",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#convert-data-type",
    "title": "Take-home Exercise 1",
    "section": "2.1 Convert data type",
    "text": "2.1 Convert data type\nThe ‘Sale Date’ column is read as a character (chr) type, we need to convert it as date type.\n\nRT_q1_2023 &lt;- RT_q1_2023 %&gt;% mutate(`Sale Date` = as.Date(`Sale Date`, format = \"%d %b %Y\"))\nRT_q2_2023 &lt;- RT_q2_2023 %&gt;% mutate(`Sale Date` = as.Date(`Sale Date`, format = \"%d %b %Y\"))\nRT_q3_2023 &lt;- RT_q3_2023 %&gt;% mutate(`Sale Date` = as.Date(`Sale Date`, format = \"%d %b %Y\"))\nRT_q4_2023 &lt;- RT_q4_2023 %&gt;% mutate(`Sale Date` = as.Date(`Sale Date`, format = \"%d %b %Y\"))\nRT_q1_2024 &lt;- RT_q1_2024 %&gt;% mutate(`Sale Date` = as.Date(`Sale Date`, format = \"%d %b %Y\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#combine-the-datasets-and-check-missing-values",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#combine-the-datasets-and-check-missing-values",
    "title": "Take-home Exercise 1",
    "section": "2.2 Combine the datasets and Check missing values",
    "text": "2.2 Combine the datasets and Check missing values\nIn our analysis, we need to merge multiple quarterly datasets into a single frame to perform a comprehensive review of the trends over time. To accomplish this, we use the bind_rows() function from the dplyr package. This function is highly efficient for appending data frames, especially when they share the same columns. By binding the rows of individual quarterly data frames, we can ensure a seamless and orderly consolidation of the data.\n\nRT_all &lt;- bind_rows(RT_q1_2023, RT_q2_2023, RT_q3_2023, RT_q4_2023, RT_q1_2024)\n\nOnce we have combined the data frames into RT_all, it is important to verify the range of the data we are working with. We are particularly interested in the ‘Sale Date’ range to understand the temporal bounds of our dataset by the range() function .\n\n\n\nClick to show code\n\n\nrange(RT_all$`Sale Date`)\n\n[1] \"2023-01-01\" \"2024-03-31\"\n\n\n\nBefore delving into analyses, it is imperative to assess the completeness of the dataset.Count missing values for each column in the combined data frame. It shows only 6 missing values in the column of “Area (SQM)”. Below is the summary of missing values for each column, generated using the summarise(across(everything(), ~ sum(is.na(.)))) function, which allows us to count NA values across all columns efficiently.\n\n\nClick to show code\n\n\nmissing_values_summary &lt;- RT_all %&gt;%\n  summarise(across(everything(), ~ sum(is.na(.))))\n\nmissing_values_summary\n\n# A tibble: 1 × 21\n  `Project Name` `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n           &lt;int&gt;                  &lt;int&gt;         &lt;int&gt;                &lt;int&gt;\n1              0                      0             0                    0\n# ℹ 17 more variables: `Sale Date` &lt;int&gt;, Address &lt;int&gt;, `Type of Sale` &lt;int&gt;,\n#   `Type of Area` &lt;int&gt;, `Area (SQM)` &lt;int&gt;, `Unit Price ($ PSM)` &lt;int&gt;,\n#   `Nett Price($)` &lt;int&gt;, `Property Type` &lt;int&gt;, `Number of Units` &lt;int&gt;,\n#   Tenure &lt;int&gt;, `Completion Date` &lt;int&gt;, `Purchaser Address Indicator` &lt;int&gt;,\n#   `Postal Code` &lt;int&gt;, `Postal District` &lt;int&gt;, `Postal Sector` &lt;int&gt;,\n#   `Planning Region` &lt;int&gt;, `Planning Area` &lt;int&gt;"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#remove-duplicates-and-create-new-varaiables",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#remove-duplicates-and-create-new-varaiables",
    "title": "Take-home Exercise 1",
    "section": "2.3 Remove duplicates and Create new varaiables",
    "text": "2.3 Remove duplicates and Create new varaiables\nUpon assessment of our dataset, we have discerned a dual representation of area measurements: ‘Area (SQFT)’ and ‘Area (SQM)’. We observed that the ‘Area (SQM)’ column contains missing values which may complicate our analyses. Given the completeness and sufficiency of the ‘Area (SQFT)’ data, we have opted to remove the ‘Area (SQM)’,‘Unit Price ($ PSM)’ column, and Nett Price($).\n\n\nClick to show code\n\n\nRT_new &lt;- RT_all %&gt;%\n  select(-'Unit Price ($ PSM)', -'Area (SQM)', -`Nett Price($)`)\nprint(RT_new)\n\n# A tibble: 26,806 × 18\n   `Project Name`      `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n   &lt;chr&gt;                                &lt;dbl&gt;         &lt;dbl&gt;                &lt;dbl&gt;\n 1 THE REEF AT KING'S…                2317000          883.                 2625\n 2 URBAN TREASURES                    1823500          883.                 2066\n 3 NORTH GAIA                         1421112         1076.                 1320\n 4 NORTH GAIA                         1258112         1033.                 1218\n 5 PARC BOTANNIA                      1280000          872.                 1468\n 6 NANYANG PARK                       5870000         3323.                 1767\n 7 PALMS @ SIXTH AVEN…                4950000         4521.                 1095\n 8 N.A.                               3260000         1555.                 2096\n 9 WHISTLER GRAND                      850000          441.                 1926\n10 NORTHOAKS                          1268000         1604.                  791\n# ℹ 26,796 more rows\n# ℹ 14 more variables: `Sale Date` &lt;date&gt;, Address &lt;chr&gt;, `Type of Sale` &lt;chr&gt;,\n#   `Type of Area` &lt;chr&gt;, `Property Type` &lt;chr&gt;, `Number of Units` &lt;dbl&gt;,\n#   Tenure &lt;chr&gt;, `Completion Date` &lt;chr&gt;, `Purchaser Address Indicator` &lt;chr&gt;,\n#   `Postal Code` &lt;chr&gt;, `Postal District` &lt;chr&gt;, `Postal Sector` &lt;chr&gt;,\n#   `Planning Region` &lt;chr&gt;, `Planning Area` &lt;chr&gt;\n\n\n\nAs part of this analytics project, we need to organize the dates into quarters for better analysis and understanding of trends over time. By classifying the dates into quarters, we can identify seasonal patterns, track changes in performance or behavior, and make more informed decisions based on the insights gained from our analysis.\n\n\nClick to show code\n\n\nRT_new &lt;- RT_new %&gt;%\n  mutate(Quarter = case_when(\n    quarter(`Sale Date`) == 1 & year(`Sale Date`) == 2023 ~ \"Q1 2023\",\n    quarter(`Sale Date`) == 2 & year(`Sale Date`) == 2023 ~ \"Q2 2023\",\n    quarter(`Sale Date`) == 3 & year(`Sale Date`) == 2023 ~ \"Q3 2023\",\n    quarter(`Sale Date`) == 4 & year(`Sale Date`) == 2023 ~ \"Q4 2023\",\n    quarter(`Sale Date`) == 1 & year(`Sale Date`) == 2024 & month(`Sale Date`) %in% 1:3 ~ \"Q1 2024\",\n    TRUE ~ \"Other\"  \n  ))\n\nhead(RT_new)\n\n# A tibble: 6 × 19\n  `Project Name`       `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n  &lt;chr&gt;                                 &lt;dbl&gt;         &lt;dbl&gt;                &lt;dbl&gt;\n1 THE REEF AT KING'S …                2317000          883.                 2625\n2 URBAN TREASURES                     1823500          883.                 2066\n3 NORTH GAIA                          1421112         1076.                 1320\n4 NORTH GAIA                          1258112         1033.                 1218\n5 PARC BOTANNIA                       1280000          872.                 1468\n6 NANYANG PARK                        5870000         3323.                 1767\n# ℹ 15 more variables: `Sale Date` &lt;date&gt;, Address &lt;chr&gt;, `Type of Sale` &lt;chr&gt;,\n#   `Type of Area` &lt;chr&gt;, `Property Type` &lt;chr&gt;, `Number of Units` &lt;dbl&gt;,\n#   Tenure &lt;chr&gt;, `Completion Date` &lt;chr&gt;, `Purchaser Address Indicator` &lt;chr&gt;,\n#   `Postal Code` &lt;chr&gt;, `Postal District` &lt;chr&gt;, `Postal Sector` &lt;chr&gt;,\n#   `Planning Region` &lt;chr&gt;, `Planning Area` &lt;chr&gt;, Quarter &lt;chr&gt;\n\n\n\nThere are few housing types in the data sets, which composed of private housing and public housing. Next we will conduct check on the property type for classification.To confirm the categorization and examine the property types present in our dataset, we employ the unique() function, which identifies distinct entries within the ‘Property Type’ column.\n\n\nClick to show code\n\n\nunique(RT_new$`Property Type`)\n\n[1] \"Condominium\"           \"Executive Condominium\" \"Terrace House\"        \n[4] \"Semi-Detached House\"   \"Apartment\"             \"Detached House\"       \n\n\n\nIn summary, Condominium, Terrace House, Executive Condominium, Semi-Detached House, and Detached House would be classified as Private Housing. Apartment is a Housing and Development Board (HDB) flat, which is public housing.\nTo create a new column in the dataframe with the classification of ‘Public Housing’ or ‘Private Housing’,we can use the mutate() function from the dplyr package.\n\n\nClick to show code\n\n\nprivate_types &lt;- c(\"Condominium\", \"Terrace House\", \"Executive Condominium\",\n                   \"Semi-Detached House\", \"Detached House\")\npublic_types &lt;- c(\"Apartment\") # Modify this based on your specific context\n\n# Define the function to classify the housing type\nclassify_housing &lt;- function(type) {\n  if (type %in% private_types) {\n    return('Private Housing')\n  } else if (type %in% public_types) {\n    return('Public Housing')\n  } else {\n    return('Other') # In case there are types that do not fit in the above categories\n  }\n}\n\n# Use mutate to apply the classification to a new column\nRT_new &lt;- RT_new %&gt;%\n  mutate(Housing_Category = sapply(`Property Type`, classify_housing))\n\n# Check the first few rows of your dataframe to confirm\nhead(RT_new)\n\n# A tibble: 6 × 20\n  `Project Name`       `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n  &lt;chr&gt;                                 &lt;dbl&gt;         &lt;dbl&gt;                &lt;dbl&gt;\n1 THE REEF AT KING'S …                2317000          883.                 2625\n2 URBAN TREASURES                     1823500          883.                 2066\n3 NORTH GAIA                          1421112         1076.                 1320\n4 NORTH GAIA                          1258112         1033.                 1218\n5 PARC BOTANNIA                       1280000          872.                 1468\n6 NANYANG PARK                        5870000         3323.                 1767\n# ℹ 16 more variables: `Sale Date` &lt;date&gt;, Address &lt;chr&gt;, `Type of Sale` &lt;chr&gt;,\n#   `Type of Area` &lt;chr&gt;, `Property Type` &lt;chr&gt;, `Number of Units` &lt;dbl&gt;,\n#   Tenure &lt;chr&gt;, `Completion Date` &lt;chr&gt;, `Purchaser Address Indicator` &lt;chr&gt;,\n#   `Postal Code` &lt;chr&gt;, `Postal District` &lt;chr&gt;, `Postal Sector` &lt;chr&gt;,\n#   `Planning Region` &lt;chr&gt;, `Planning Area` &lt;chr&gt;, Quarter &lt;chr&gt;,\n#   Housing_Category &lt;chr&gt;\n\n\n\nNow that we’ve completed these preparatory steps, let’s review the updated data table by glimpse() function.\n\nglimpse(RT_new)\n\nRows: 26,806\nColumns: 20\n$ `Project Name`                &lt;chr&gt; \"THE REEF AT KING'S DOCK\", \"URBAN TREASU…\n$ `Transacted Price ($)`        &lt;dbl&gt; 2317000, 1823500, 1421112, 1258112, 1280…\n$ `Area (SQFT)`                 &lt;dbl&gt; 882.65, 882.65, 1076.40, 1033.34, 871.88…\n$ `Unit Price ($ PSF)`          &lt;dbl&gt; 2625, 2066, 1320, 1218, 1468, 1767, 1095…\n$ `Sale Date`                   &lt;date&gt; 2023-01-01, 2023-01-02, 2023-01-02, 202…\n$ Address                       &lt;chr&gt; \"12 HARBOURFRONT AVENUE #05-32\", \"205 JA…\n$ `Type of Sale`                &lt;chr&gt; \"New Sale\", \"New Sale\", \"New Sale\", \"New…\n$ `Type of Area`                &lt;chr&gt; \"Strata\", \"Strata\", \"Strata\", \"Strata\", …\n$ `Property Type`               &lt;chr&gt; \"Condominium\", \"Condominium\", \"Executive…\n$ `Number of Units`             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Tenure                        &lt;chr&gt; \"99 yrs from 12/01/2021\", \"Freehold\", \"9…\n$ `Completion Date`             &lt;chr&gt; \"Uncompleted\", \"Uncompleted\", \"Uncomplet…\n$ `Purchaser Address Indicator` &lt;chr&gt; \"HDB\", \"Private\", \"HDB\", \"HDB\", \"HDB\", \"…\n$ `Postal Code`                 &lt;chr&gt; \"097996\", \"419535\", \"269343\", \"269294\", …\n$ `Postal District`             &lt;chr&gt; \"04\", \"14\", \"27\", \"27\", \"28\", \"19\", \"10\"…\n$ `Postal Sector`               &lt;chr&gt; \"09\", \"41\", \"26\", \"26\", \"79\", \"54\", \"27\"…\n$ `Planning Region`             &lt;chr&gt; \"Central Region\", \"East Region\", \"North …\n$ `Planning Area`               &lt;chr&gt; \"Bukit Merah\", \"Bedok\", \"Yishun\", \"Yishu…\n$ Quarter                       &lt;chr&gt; \"Q1 2023\", \"Q1 2023\", \"Q1 2023\", \"Q1 202…\n$ Housing_Category              &lt;chr&gt; \"Private Housing\", \"Private Housing\", \"P…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary-statistics-of-data-table",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary-statistics-of-data-table",
    "title": "Take-home Exercise 1",
    "section": "2.4 Summary statistics of data table",
    "text": "2.4 Summary statistics of data table\nMoving forward, we will compute summary statistics. These will provide us with valuable insights, such as the average, median, minimum, and maximum transacted prices, which are pivotal for understanding the market’s behavior.\n\nSummaryCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuarter\nProperty Type\nTotal_Transactions\nAverage_Price\nMedian_Price\nMin_Price\nMax_Price\n\n\n\n\nQ1 2023\nApartment\n1659\n2072938\n1707000\n538000\n27500000\n\n\nQ1 2023\nCondominium\n2166\n2189488\n1608000\n580000\n392180000\n\n\nQ1 2023\nDetached House\n62\n14324795\n11550000\n3790000\n61080008\n\n\nQ1 2023\nExecutive Condominium\n535\n1394549\n1330000\n830000\n2347000\n\n\nQ1 2023\nSemi-Detached House\n88\n5783790\n5559000\n780000\n12600000\n\n\nQ1 2023\nTerrace House\n212\n3832491\n3550000\n988888\n18000000\n\n\nQ1 2024\nApartment\n1852\n1853613\n1668902\n555000\n16500000\n\n\nQ1 2024\nCondominium\n1858\n2002576\n1730000\n560000\n13049000\n\n\nQ1 2024\nDetached House\n40\n12378131\n10940000\n3618000\n39500000\n\n\nQ1 2024\nExecutive Condominium\n843\n1520791\n1488000\n770000\n2450000\n\n\nQ1 2024\nSemi-Detached House\n93\n6070181\n5600000\n2600000\n15200000\n\n\nQ1 2024\nTerrace House\n216\n3718830\n3666500\n1850000\n6800000\n\n\nQ2 2023\nApartment\n2661\n1944189\n1748000\n520000\n18800000\n\n\nQ2 2023\nCondominium\n2451\n1991242\n1670000\n600000\n45000000\n\n\nQ2 2023\nDetached House\n49\n12151908\n9000000\n1250000\n42000000\n\n\nQ2 2023\nExecutive Condominium\n620\n1292507\n1281400\n560000\n2400000\n\n\nQ2 2023\nSemi-Detached House\n128\n5267731\n4505000\n2500888\n24900000\n\n\nQ2 2023\nTerrace House\n216\n3876417\n3554000\n1900000\n66800000\n\n\nQ3 2023\nApartment\n2578\n1871029\n1680000\n440000\n11750000\n\n\nQ3 2023\nCondominium\n2250\n1874148\n1632500\n630000\n32000000\n\n\nQ3 2023\nDetached House\n40\n10213797\n8300000\n3800000\n25300000\n\n\nQ3 2023\nExecutive Condominium\n954\n1470063\n1432000\n700000\n2441000\n\n\nQ3 2023\nSemi-Detached House\n125\n6265132\n5550000\n2650000\n13054800\n\n\nQ3 2023\nTerrace House\n259\n3874248\n3749000\n505000\n11000000\n\n\nQ4 2023\nApartment\n2022\n1860997\n1670000\n570000\n18000000\n\n\nQ4 2023\nCondominium\n1918\n2137676\n1660000\n638000\n22000000\n\n\nQ4 2023\nDetached House\n42\n11641208\n8469100\n1330000\n33888000\n\n\nQ4 2023\nExecutive Condominium\n582\n1399622\n1371500\n710000\n2450000\n\n\nQ4 2023\nSemi-Detached House\n90\n5871484\n5025000\n1150000\n15750000\n\n\nQ4 2023\nTerrace House\n197\n3664622\n3576888\n570000\n10268000\n\n\n\n\n\n\n\n\n  group_by(Quarter, `Property Type`) %&gt;%\n  summarise(\n    Total_Transactions = n(),\n    Average_Price = mean(`Transacted Price ($)`, na.rm = TRUE),\n    Median_Price = median(`Transacted Price ($)`, na.rm = TRUE),\n    Min_Price = min(`Transacted Price ($)`, na.rm = TRUE),\n    Max_Price = max(`Transacted Price ($)`, na.rm = TRUE),\n    .groups = 'drop' # This will remove the grouping\n  )\n\n# Using knitr::kable() to print the full table\nkable(summary_table)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-relationship-between-transacted-price-and-property-type",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-relationship-between-transacted-price-and-property-type",
    "title": "Take-home Exercise 1",
    "section": "3.1 The relationship between Transacted price and Property type",
    "text": "3.1 The relationship between Transacted price and Property type\nA pivotal aspect of our exploratory data analysis is understanding the relationship between the transacted price and the type of property. Different types of properties, such as condominiums, terraced houses, or apartments, may exhibit unique price distributions due to various factors like location, size, and amenities. These distinctions can provide us with valuable insights into market segmentation and consumer preferences.\nTo visualize this relationship, we will construct a boxplot, which is anexcellent tool for depicting the distribution of transacted prices across different property types. This graphical representation will highlight the median, quartiles, and potential outliers within each property category.\n\n\n\n\n\n\n\n\n\n\n\nClick to show code\n\n\nggplot(RT_new, aes(x = `Property Type`, y = `Transacted Price ($)`, fill = `Property Type`)) +\n  geom_boxplot() +\n  scale_fill_brewer(palette = \"Pastel1\") +  \n  scale_y_log10(labels = scales::dollar_format()) +\n  labs(\n    x = \"Property Type\",\n    y = \"Transacted Price ($)\",\n    title = \"Boxplot of Transacted Price by Property Type\"\n  ) +\n  theme_light() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nObservation:\n\nExecutive Condominiums and Condominiums display higher median prices compared to Apartments and Terrace Houses.\nDetached Houses exhibit the widest range of transacted prices, indicating high variability in this property type.\nThere are numerous outliers for Condominiums, suggesting that there are some highly priced units within this category.\nApartments appear to be the most affordable property type, with lower median and fewer high-value outliers.\nSemi-Detached and Detached Houses show higher price ranges, suggesting these are generally more premium property types\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick to show code\n\n\nggplot(RT_new, aes(x = `Transacted Price ($)`, y = `Property Type`, fill = ..ecdf..)) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    scale = 3, \n    rel_min_height = 0.01 \n  ) +\n  scale_fill_viridis_c(\n    name = \"Tail probability\",\n    option = \"C\", \n    direction = -1  \n  ) +\n  scale_x_log10(labels = dollar_format()) +  # Use logarithmic scale for x-axis\n  labs(\n    x = \"Transacted Price ($)\",\n    y = \"Property Type\",\n    title = \"Density Ridge Gradient Plot of Transacted Price by Property Type\"\n  ) +\n  theme_light() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1)\n  )\n\n\nThe plot illustrates the distribution of property prices across property types, with color intensity reflecting the probability density of price points.\n\n\n\n\n\n\nObservation:\n\nApartments show the lowest price range, predominantly under $1,000,000, suggesting they are the most affordable property type within this market.\nCondominiums display a broader distribution with a significant concentration around $1,000,000 to $2,000,000, indicating a middle-tier price range.\nDetached Houses have the widest distribution, extending well beyond $10,000,000, highlighting them as the most varied and potentially expensive property type.\nExecutive Condominiums appear to have a compact distribution centered just around $1,000,000, pointing to a less diverse price range.\nHigh-value Outliers are most prominent within Detached and Semi-Detached Houses, as seen in the long tails stretching to the right."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-sales-units-across-regions-and-areas",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-sales-units-across-regions-and-areas",
    "title": "Take-home Exercise 1",
    "section": "3.2 Distribution of Sales Units across Regions and Areas",
    "text": "3.2 Distribution of Sales Units across Regions and Areas\nUnderstanding the spatial distribution of property sales is pivotal for recognizing market trends and potential areas of growth or decline. The bar plots constructed to visualize these distributions offer a clear visual representation of where the real estate market is most vibrant and where it is more subdued.\n\n\n\n\n\n\n\n\n\n\n\nClick to show code\n\n\nplot1 &lt;- ggplot(RT_new, aes(x = `Planning Region`, y = `Number of Units`)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +  # Change the color here\n  labs(x = \"Planning Region\", y = \"Number of Units\", title = \"Distribution of Units by Planning Region\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1), \n        plot.title = element_text(hjust = 0.5)) +\n  theme_minimal()\n\nplot2 &lt;- ggplot(RT_new, aes(x = `Planning Area`, y = `Number of Units`)) +\n  geom_bar(stat = \"identity\", fill = \"lightblue\") +  # And here\n  labs(x = \"Planning Area\", y = \"Number of Units\", title = \"Distribution of Units by Planning Area\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1), \n        plot.title = element_text(hjust = 0.5))\n\n# Combine the plots\ncombined_plot &lt;- plot1 / plot2 \n\n# Print the combined plot\ncombined_plot\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick to show code\n\n\n# Sum the 'Number of Units' for each 'Planning Area' within each 'Planning Region'\nRT_new_aggregated &lt;- RT_new %&gt;%\n  group_by(`Planning Region`, `Planning Area`) %&gt;%\n  summarise(TotalUnits = sum(`Number of Units`), .groups = 'drop') \n\ncombined_plot &lt;- ggplot(RT_new_aggregated, aes(x = `Planning Area`, y = TotalUnits)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", fill = \"lightblue\") +\n  facet_wrap(~`Planning Region`, scales = \"free_x\") +\n  labs(\n    x = \"Planning Area\",\n    y = \"Total Number of Units\",\n    title = \"Distribution of Total Units by Planning Area within each Planning Region\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8),\n    legend.position = \"none\"\n  ) +\n  scale_y_continuous(expand = expansion(mult = c(0, .05)))\ncombined_plot\n\n\n\n\n\n\n\n\nObservation:\nThe top plot reveals that the Central Region has the highest number of sales units compared to other regions, suggesting a denser or more active real estate market in this area. The other regions show significantly fewer units, with the North East Region and West Region being the next most active. Both these regions show a more even distribution, with most planning areas having a moderate number of units, generally in the range of about 500 to 1000 units. This might indicate a more balanced development approach or uniform population density.\nThe North Region and West Region seem to have less developed character based on the generally lower number of units."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-private-housing-price-trend-from-2023-2024q1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-private-housing-price-trend-from-2023-2024q1",
    "title": "Take-home Exercise 1",
    "section": "3.3 The Private Housing price trend from 2023-2024Q1",
    "text": "3.3 The Private Housing price trend from 2023-2024Q1\nThis density plot depicts the distribution of transacted real estate prices across different quarters, from Q1 2023 to Q1 2024.\n\n\n\n\n\n\n\n\n\n\n\nClick to show code\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales) # for dollar_format()\n\nggplot(RT_new, aes(x = `Transacted Price ($)`)) +\n  geom_density(aes(color = Quarter), adjust = 0.5, alpha = 0.5) + \n  scale_x_log10(limits = c(100000, 10000000), labels = scales::dollar_format()) + # Log transform and set limits\n  labs(title = \"Density Plot of Transacted Prices by Quarter\",\n       x = \"Transacted Price ($)\",\n       y = \"Density\") +\n  theme_minimal() +\n  theme(text = element_text(size = 12),  # Increase base text size\n        axis.title = element_text(size = 14, face = \"bold\"),  # Bold axis titles\n        axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis text for readability\n        axis.text.y = element_text(size = 12), \n        legend.title = element_text(size = 12),  \n        legend.text = element_text(size = 10)) \n\n\n\n\n\n\n\n\nObservation:\n\nThe curves are quite similar in shape and position, indicating that the general distribution of prices has remained relatively stable from quarter to quarter during this timeframe.\nThere’s a tailing off as the prices increase, which is typical of real estate markets where there are fewer high-priced transactions.\nThe small bumps and increases in density at the higher end of the price scale, particularly noticeable in the curves for Q2 and Q4 2023, might indicate periods or areas with higher-than-average property transactions.\n\n\n\n\nThe scatter plot shows transaction prices for private housing, which appear to be spread across a wide range. Based on these observations, the key takeaways could be the identification of property types with the highest prices, the recognition of the most common price range, and the overall trend in housing prices over the year.\n\n\n\n\n\n\n\n\n\n\n\nClick to show code\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(scales)\n\nprivate_housing_data &lt;- RT_new %&gt;%\n  filter(Housing_Category == \"Private Housing\")\n\ntransacted_price_trend &lt;- private_housing_data %&gt;%\n  group_by(`Property Type`, `Sale Date`) %&gt;%\n  summarize(Average_Price = mean(`Transacted Price ($)`), .groups = 'drop')\n\nmax_prices &lt;- transacted_price_trend %&gt;%\n  group_by(`Property Type`) %&gt;%\n  summarize(Max_Average_Price = max(Average_Price), .groups = 'drop')\n\nannotated_data &lt;- transacted_price_trend %&gt;%\n  left_join(max_prices, by = \"Property Type\") %&gt;%\n  # Only keep the rows where the average price matches the max average price\n  filter(Average_Price == Max_Average_Price) \n\nggplot(transacted_price_trend, aes(x = `Sale Date`, y = Average_Price)) +\n  geom_point(aes(color = `Property Type`)) +  # Color points by Property Type\n  geom_smooth(method = \"loess\", se = FALSE) +\n  geom_label_repel(\n    data = annotated_data,\n    aes(label = `Property Type`),\n    size = 4,\n    nudge_y = 0.1,\n    nudge_x = 0.1,\n    fontface = \"bold\",\n    box.padding = unit(0.35, \"lines\"),\n    point.padding = unit(0.5, \"lines\")\n  ) +\n  theme_minimal() +\n  labs(\n    title = \"Private Housing Transacted Price Distribution\",\n    x = \"Sale Date\",\n    y = \"Average Transacted Price ($)\"\n  ) +\n  scale_y_log10(labels = dollar_format()) +\n  scale_color_brewer(palette = \"Set1\") # Adds a color palette for different property types\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick to show code\n\n\nggplot(transacted_price_trend, aes(x = `Sale Date`, y = Average_Price)) +\n  geom_point(aes(color = `Property Type`)) +\n  geom_smooth(method = \"loess\", se = FALSE) +\n  facet_wrap(~`Property Type`, scales = \"free_y\") +  # Facet by Property Type\n  theme_minimal() +\n  labs(\n    title = \"Private Housing Transacted Price Trend by Property Type\",\n    x = \"Sale Date\",\n    y = \"Average Transacted Price ($)\"\n  ) +\n  scale_y_log10(labels = dollar_format()) +\n  scale_color_brewer(palette = \"Set1\") +\n  theme(legend.position = \"none\") # Remove the legend to save space\n\n\n\n\n\n\n\n\nObservation:\nCondominiums : Prices are concentrated within a narrower band, showing less variation over time, which suggests stability in condominium prices.\nDetached Houses : Display a broader range of prices, indicating a more diverse market that includes both moderately priced and high-end luxury homes.\nExecutive Condominiums : Have a clustering of prices at the lower end, with an upward trend over time, which may indicate increasing demand or value appreciation for this type of property.\nSemi-Detached Houses : Similar to detached houses, they show a wide range of transaction prices, reflecting a varied market.\nTerrace Houses : Prices seem to have a smaller variation and are centered around a price point, suggesting a more uniform market for this type of property."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "title": "Take-home Exercise 1",
    "section": "Conclusion",
    "text": "Conclusion\n\nPublic housing caters to the majority with affordable options. Private housing, on the other hand, serves those with higher income brackets, offering a diverse range of property types and price points.The exploratory data analysis highlights the stark segmentation within the private housing market. We observe that detached houses, catering to the upper end of the market, not only command higher prices but also demonstrate greater price variabilitys.\nThe distribution of units by planning region and area reveals disparities in housing density that reflect both the current state of urban development and potential areas for growth. High numbers of units in certain regions may indicate areas with high housing demand or development. Conversely, areas with fewer units could represent less developed or more exclusive regions.\nOver the depicted time period from 2023Q1 to 2024Q1, there does not appear to be a clear upward or downward trend in prices for any property type, suggesting relative market stability during this time.\nIn summary, the private housing market in Singapore offers a variety of options for families with different income levels, with distinct patterns in terms of price distribution and unit density across regions."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "In this take-home exercise 02 , we are required to:\n\nselect one of the Take-home Exercise 1 prepared by our classmates,\ncritique the submission in terms of clarity and aesthetics,\nprepare a sketch for the alternative design by using the data visualization design principles and best practices we have learned in Lesson 1 and 2,\nremake the original design by using ggplot2, ggplot2 extensions and tidyverse packages."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#original-design",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#original-design",
    "title": "Take-home Exercise 2",
    "section": "2.1 Original Design",
    "text": "2.1 Original Design\nthe plot below shows the original design"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#critique-clarity-and-aesthetics",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#critique-clarity-and-aesthetics",
    "title": "Take-home Exercise 2",
    "section": "2.2 Critique : Clarity and Aesthetics",
    "text": "2.2 Critique : Clarity and Aesthetics\n\nClarity:\n\nThough it analysis the distribution according to type of sales, but the plot only focus on one quarter of 2024, it will be more helpful if can compare the 2023 to 2024 besed on the data we have.\nThe y-axis label and tick marks could use some formatting. It’s generally more readable to format large numbers with either thousands separators or in millions of dollars.\nThe plot shows a significant number of outliers, especially for the ‘Resale’ type. While it’s important to display outliers to show the full range of data, it might also be useful to analyze if additional filtering is needed or if a different type of plot might represent the data more effectively.\nGiven the density of points in the ‘Resale’ type of sale, it might be useful to consider alternative plot types or additional plots that break down this category further to provide more insights into the underlying data.\n\n\n\nAesthetics:\n\nThe grid lines are quite prominent and might draw attention away from the data itself. Consider lightening the grid lines or using a subtler color to ensure that the data stands out more.\nThe overall simplicity of the plot is good for focus, but a minor tweak to the aesthetics such as adjusting the background color or grid lines could make it more visually appealing."
  }
]